{"ast":null,"code":"import React, { useState } from \"react\";\n\nconst calculateTotal = (productList, quantities) => {\n  let total = 0;\n  productList.forEach(({\n    item,\n    unitPrice,\n    offer\n  }) => {\n    if (quantities[item] === 0) return; // If the current product quantity is zero, move onto the next product\n\n    if (offer) {\n      // If the current product has a truthy property of specialOffer, calculate the necessary discount as well as any full priced remaining product quantity\n      const {\n        quantity,\n        specialPrice\n      } = offer;\n      let deal = quantities[item] / quantity;\n      let remainder = quantities[item] % quantity;\n      total += Math.floor(deal) * specialPrice + remainder * unitPrice;\n      return;\n    } // If the quantity is above zero but it doesn't have any specialOffers, simply calculate the price\n\n\n    total += quantities[item] * unitPrice;\n  });\n  return total;\n};\n\nexport default calculateTotal;","map":{"version":3,"sources":["/Users/waqar.a/Documents/MyStuff/Int/Companies/CDL/assesment/cdl-checkout-app/src/components/totalCalculator.js"],"names":["React","useState","calculateTotal","productList","quantities","total","forEach","item","unitPrice","offer","quantity","specialPrice","deal","remainder","Math","floor"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,cAAc,GAAG,CAACC,WAAD,EAAcC,UAAd,KAA6B;AAChD,MAAIC,KAAK,GAAG,CAAZ;AAEAF,EAAAA,WAAW,CAACG,OAAZ,CAAoB,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,GAAD,KAAgC;AAClD,QAAIL,UAAU,CAACG,IAAD,CAAV,KAAqB,CAAzB,EAA4B,OADsB,CACd;;AACpC,QAAIE,KAAJ,EAAW;AACT;AACA,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA6BF,KAAnC;AAEA,UAAIG,IAAI,GAAGR,UAAU,CAACG,IAAD,CAAV,GAAmBG,QAA9B;AACA,UAAIG,SAAS,GAAGT,UAAU,CAACG,IAAD,CAAV,GAAmBG,QAAnC;AAEAL,MAAAA,KAAK,IAAIS,IAAI,CAACC,KAAL,CAAWH,IAAX,IAAmBD,YAAnB,GAAkCE,SAAS,GAAGL,SAAvD;AACA;AACD,KAXiD,CAYlD;;;AACAH,IAAAA,KAAK,IAAID,UAAU,CAACG,IAAD,CAAV,GAAmBC,SAA5B;AACD,GAdD;AAgBA,SAAOH,KAAP;AACD,CApBH;;AAsBE,eAAeH,cAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst calculateTotal = (productList, quantities) => {\n    let total = 0;\n\n    productList.forEach(({ item, unitPrice, offer }) => {\n      if (quantities[item] === 0) return; // If the current product quantity is zero, move onto the next product\n      if (offer) {\n        // If the current product has a truthy property of specialOffer, calculate the necessary discount as well as any full priced remaining product quantity\n        const { quantity, specialPrice } = offer;\n\n        let deal = quantities[item] / quantity;\n        let remainder = quantities[item] % quantity;\n\n        total += Math.floor(deal) * specialPrice + remainder * unitPrice;\n        return;\n      }\n      // If the quantity is above zero but it doesn't have any specialOffers, simply calculate the price\n      total += quantities[item] * unitPrice;\n    });\n\n    return total;\n  };\n\n  export default calculateTotal;\n"]},"metadata":{},"sourceType":"module"}