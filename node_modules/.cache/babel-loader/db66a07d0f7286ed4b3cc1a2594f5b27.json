{"ast":null,"code":"var _jsxFileName = \"/Users/waqar.a/Documents/MyStuff/Int/Companies/CDL/assesment/cdl-checkout-app/src/components/checkout.js\";\nimport React, { useState } from \"react\"; //import ProductList from \"../assets/ProductList\";\n//import toMoney from \"../assets/toMoney\";\n//import Products from \"../components/Products\";\n//import Basket from \"../components/Basket\";\n\nimport Header from \"./header\";\n/*\nlet allProducts = {};\n\n// Create a simple object, with properties consisting of all the item names imported from ProductList\nProductList.forEach(({ item }) => {\n  allProducts[item] = 0;\n});\n\nconst MainPage = () => {\n  const [basketQuantities, setBasketQuantities] = useState(allProducts);\n  const [total, updateTotal] = useState(toMoney(0));\n\n  const setNewProductQuantities = (item, quantity) => {\n    // Update the corresponding product in the basketQuantities, and recalculate the new total price\n    let newBasketQuantities = { ...basketQuantities };\n    newBasketQuantities[item] += quantity;\n    updateTotal(calculateTotal(ProductList, newBasketQuantities));\n    setBasketQuantities(newBasketQuantities);\n  };\n\n  const calculateTotal = (productList, quantities) => {\n    let total = 0;\n\n    productList.forEach(({ item, basePrice, specialOffer }) => {\n      if (quantities[item] === 0) return; // If the current product quantity is zero, move onto the next product\n      if (specialOffer) {\n        // If the current product has a truthy property of specialOffer, calculate the necessary discount as well as any full priced remaining product quantity\n        const { specialQuantity, specialPrice } = specialOffer;\n\n        let deal = quantities[item] / specialQuantity;\n        let remainder = quantities[item] % specialQuantity;\n\n        total += Math.floor(deal) * specialPrice + remainder * basePrice;\n        return;\n      }\n      // If the quantity is above zero but it doesn't have any specialOffers, simply calculate the price\n      total += quantities[item] * basePrice;\n    });\n\n    return toMoney(total);\n  };\n\n  const resetBasket = () => {\n    // Set the quantities back to the original empty product list, and total back to zero.\n    setBasketQuantities(allProducts);\n    updateTotal(toMoney(0));\n  };\n\n  return (\n    <div>\n      <Products\n        productList={ProductList}\n        setQuantity={setNewProductQuantities}\n      />\n      <Basket\n        quantities={basketQuantities}\n        total={total}\n        resetBasket={resetBasket}\n      />\n    </div>\n  );\n};\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/waqar.a/Documents/MyStuff/Int/Companies/CDL/assesment/cdl-checkout-app/src/components/checkout.js"],"names":["React","useState","Header","Checkout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;AACA;AACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACrB,sBACE;AAAA,2BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;KAAMA,Q;AAON,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\n//import ProductList from \"../assets/ProductList\";\n//import toMoney from \"../assets/toMoney\";\n//import Products from \"../components/Products\";\n//import Basket from \"../components/Basket\";\nimport Header from \"./header\";\n/*\nlet allProducts = {};\n\n// Create a simple object, with properties consisting of all the item names imported from ProductList\nProductList.forEach(({ item }) => {\n  allProducts[item] = 0;\n});\n\nconst MainPage = () => {\n  const [basketQuantities, setBasketQuantities] = useState(allProducts);\n  const [total, updateTotal] = useState(toMoney(0));\n\n  const setNewProductQuantities = (item, quantity) => {\n    // Update the corresponding product in the basketQuantities, and recalculate the new total price\n    let newBasketQuantities = { ...basketQuantities };\n    newBasketQuantities[item] += quantity;\n    updateTotal(calculateTotal(ProductList, newBasketQuantities));\n    setBasketQuantities(newBasketQuantities);\n  };\n\n  const calculateTotal = (productList, quantities) => {\n    let total = 0;\n\n    productList.forEach(({ item, basePrice, specialOffer }) => {\n      if (quantities[item] === 0) return; // If the current product quantity is zero, move onto the next product\n      if (specialOffer) {\n        // If the current product has a truthy property of specialOffer, calculate the necessary discount as well as any full priced remaining product quantity\n        const { specialQuantity, specialPrice } = specialOffer;\n\n        let deal = quantities[item] / specialQuantity;\n        let remainder = quantities[item] % specialQuantity;\n\n        total += Math.floor(deal) * specialPrice + remainder * basePrice;\n        return;\n      }\n      // If the quantity is above zero but it doesn't have any specialOffers, simply calculate the price\n      total += quantities[item] * basePrice;\n    });\n\n    return toMoney(total);\n  };\n\n  const resetBasket = () => {\n    // Set the quantities back to the original empty product list, and total back to zero.\n    setBasketQuantities(allProducts);\n    updateTotal(toMoney(0));\n  };\n\n  return (\n    <div>\n      <Products\n        productList={ProductList}\n        setQuantity={setNewProductQuantities}\n      />\n      <Basket\n        quantities={basketQuantities}\n        total={total}\n        resetBasket={resetBasket}\n      />\n    </div>\n  );\n};\n*/\nconst Checkout = () => {\n  return (\n    <div>\n      <Header />\n    </div>\n  );\n};\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}