{"ast":null,"code":"import React, { useState } from \"react\";\n\nconst CartTotal = (productList, quantities) => {\n  let total = 0;\n  productList.forEach(({\n    item,\n    unitPrice,\n    offer\n  }) => {\n    if (quantities[item] === 0) return;\n\n    if (offer) {\n      const {\n        quantity,\n        specialPrice\n      } = offer;\n      let offerDeal = quantities[item] / quantity;\n      let remainder = quantities[item] % quantity;\n      total += Math.floor(offerDeal) * specialPrice + remainder * unitPrice;\n      return;\n    }\n\n    total += quantities[item] * unitPrice;\n  });\n  return total;\n};\n\n_c = CartTotal;\nexport default CartTotal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartTotal\");","map":{"version":3,"sources":["/Users/waqar.a/Documents/MyStuff/Int/Companies/CDL/assesment/cdl-checkout-app/src/components/totalCalculator.js"],"names":["React","useState","CartTotal","productList","quantities","total","forEach","item","unitPrice","offer","quantity","specialPrice","offerDeal","remainder","Math","floor"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,SAAS,GAAG,CAACC,WAAD,EAAcC,UAAd,KAA6B;AAC3C,MAAIC,KAAK,GAAG,CAAZ;AAEAF,EAAAA,WAAW,CAACG,OAAZ,CAAoB,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,GAAD,KAAgC;AAEhD,QAAIL,UAAU,CAACG,IAAD,CAAV,KAAqB,CAAzB,EAA4B;;AAE9B,QAAIE,KAAJ,EAAW;AACT,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA6BF,KAAnC;AAEA,UAAIG,SAAS,GAAGR,UAAU,CAACG,IAAD,CAAV,GAAmBG,QAAnC;AACA,UAAIG,SAAS,GAAGT,UAAU,CAACG,IAAD,CAAV,GAAmBG,QAAnC;AAEAL,MAAAA,KAAK,IAAIS,IAAI,CAACC,KAAL,CAAWH,SAAX,IAAwBD,YAAxB,GAAuCE,SAAS,GAAGL,SAA5D;AACA;AACD;;AACDH,IAAAA,KAAK,IAAID,UAAU,CAACG,IAAD,CAAV,GAAmBC,SAA5B;AACD,GAdD;AAgBA,SAAOH,KAAP;AACD,CApBH;;KAAMH,S;AAsBJ,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst CartTotal = (productList, quantities) => {\n    let total = 0;\n\n    productList.forEach(({ item, unitPrice, offer }) => {\n     \n        if (quantities[item] === 0) return; \n           \n      if (offer) {\n        const { quantity, specialPrice } = offer;\n\n        let offerDeal = quantities[item] / quantity;\n        let remainder = quantities[item] % quantity;\n\n        total += Math.floor(offerDeal) * specialPrice + remainder * unitPrice;\n        return;\n      }\n      total += quantities[item] * unitPrice;\n    });\n\n    return total;\n  };\n\n  export default CartTotal;\n"]},"metadata":{},"sourceType":"module"}