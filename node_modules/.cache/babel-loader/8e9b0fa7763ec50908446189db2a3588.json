{"ast":null,"code":"var _jsxFileName = \"/Users/waqar.a/Documents/MyStuff/Int/Companies/CDL/assesment/cdl-checkout-app/src/components/checkout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TitleBanner from \"./title\";\nimport ProductCatalog from \"./products/productCatalog\";\nimport Cart from \"./cart/cart\";\nimport Products from \"./products/products\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet allProducts = {}; // set the products from the catalog\n\nProductCatalog.forEach(({\n  item\n}) => {\n  allProducts[item] = 0;\n});\n\nconst Checkout = () => {\n  _s();\n\n  const [cartQuantities, setCartQuantities] = useState(allProducts);\n  const [total, updateTotal] = useState(0);\n\n  const setNewProductQuantities = (item, quantity) => {\n    let newCartQuantities = { ...cartQuantities\n    };\n    newCartQuantities[item] += quantity;\n    updateTotal(calculateTotal(ProductCatalog, newCartQuantities));\n    setCartQuantities(newCartQuantities);\n  };\n\n  const calculateTotal = (productList, quantities) => {\n    let total = 0;\n    productList.forEach(({\n      item,\n      unitPrice,\n      offer\n    }) => {\n      if (quantities[item] === 0) return; // If the current product quantity is zero, move onto the next product\n\n      if (offer) {\n        // If the current product has a truthy property of specialOffer, calculate the necessary discount as well as any full priced remaining product quantity\n        const {\n          quantity,\n          specialPrice\n        } = offer;\n        let deal = quantities[item] / quantity;\n        let remainder = quantities[item] % quantity;\n        total += Math.floor(deal) * specialPrice + remainder * unitPrice;\n        return;\n      } // If the quantity is above zero but it doesn't have any specialOffers, simply calculate the price\n\n\n      total += quantities[item] * unitPrice;\n    });\n    return total;\n  };\n\n  const clearCart = () => {\n    // Set the quantities back to the original empty product list, and total back to zero.\n    setCartQuantities(allProducts);\n    updateTotal(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TitleBanner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Products, {\n      productList: ProductCatalog,\n      setQuantity: setNewProductQuantities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cart, {\n      quantities: cartQuantities,\n      total: total,\n      clearCart: clearCart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"zibxZLiesc6P0mPtgo96p7kzZsQ=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/waqar.a/Documents/MyStuff/Int/Companies/CDL/assesment/cdl-checkout-app/src/components/checkout.js"],"names":["React","useState","TitleBanner","ProductCatalog","Cart","Products","allProducts","forEach","item","Checkout","cartQuantities","setCartQuantities","total","updateTotal","setNewProductQuantities","quantity","newCartQuantities","calculateTotal","productList","quantities","unitPrice","offer","specialPrice","deal","remainder","Math","floor","clearCart"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,SAAxB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAGA,IAAIC,WAAW,GAAG,EAAlB,C,CAEA;;AACAH,cAAc,CAACI,OAAf,CAAuB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACnCF,EAAAA,WAAW,CAACE,IAAD,CAAX,GAAoB,CAApB;AACD,CAFD;;AAMA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAACK,WAAD,CAApD;AACA,QAAM,CAACM,KAAD,EAAQC,WAAR,IAAuBZ,QAAQ,CAAC,CAAD,CAArC;;AAEA,QAAMa,uBAAuB,GAAG,CAACN,IAAD,EAAOO,QAAP,KAAoB;AAClD,QAAIC,iBAAiB,GAAG,EAAE,GAAGN;AAAL,KAAxB;AACAM,IAAAA,iBAAiB,CAACR,IAAD,CAAjB,IAA2BO,QAA3B;AACAF,IAAAA,WAAW,CAACI,cAAc,CAACd,cAAD,EAAiBa,iBAAjB,CAAf,CAAX;AACAL,IAAAA,iBAAiB,CAACK,iBAAD,CAAjB;AACD,GALD;;AAOA,QAAMC,cAAc,GAAG,CAACC,WAAD,EAAcC,UAAd,KAA6B;AAClD,QAAIP,KAAK,GAAG,CAAZ;AAEAM,IAAAA,WAAW,CAACX,OAAZ,CAAoB,CAAC;AAAEC,MAAAA,IAAF;AAAQY,MAAAA,SAAR;AAAmBC,MAAAA;AAAnB,KAAD,KAAgC;AAClD,UAAIF,UAAU,CAACX,IAAD,CAAV,KAAqB,CAAzB,EAA4B,OADsB,CACd;;AACpC,UAAIa,KAAJ,EAAW;AACT;AACA,cAAM;AAAEN,UAAAA,QAAF;AAAYO,UAAAA;AAAZ,YAA6BD,KAAnC;AAEA,YAAIE,IAAI,GAAGJ,UAAU,CAACX,IAAD,CAAV,GAAmBO,QAA9B;AACA,YAAIS,SAAS,GAAGL,UAAU,CAACX,IAAD,CAAV,GAAmBO,QAAnC;AAEAH,QAAAA,KAAK,IAAIa,IAAI,CAACC,KAAL,CAAWH,IAAX,IAAmBD,YAAnB,GAAkCE,SAAS,GAAGJ,SAAvD;AACA;AACD,OAXiD,CAYlD;;;AACAR,MAAAA,KAAK,IAAIO,UAAU,CAACX,IAAD,CAAV,GAAmBY,SAA5B;AACD,KAdD;AAgBA,WAAOR,KAAP;AACD,GApBD;;AAsBA,QAAMe,SAAS,GAAG,MAAM;AACtB;AACAhB,IAAAA,iBAAiB,CAACL,WAAD,CAAjB;AACAO,IAAAA,WAAW,CAAC,CAAD,CAAX;AACD,GAJD;;AAMA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AACE,MAAA,WAAW,EAAEV,cADf;AAEE,MAAA,WAAW,EAAEW;AAFf;AAAA;AAAA;AAAA;AAAA,YAFF,eAME,QAAC,IAAD;AACE,MAAA,UAAU,EAAEJ,cADd;AAEE,MAAA,KAAK,EAAEE,KAFT;AAGE,MAAA,SAAS,EAAEe;AAHb;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CArDD;;GAAMlB,Q;;KAAAA,Q;AAyDN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport TitleBanner from \"./title\";\nimport ProductCatalog from \"./products/productCatalog\";\nimport Cart from \"./cart/cart\";\nimport Products from \"./products/products\"\n\n\nlet allProducts = {};\n\n// set the products from the catalog\nProductCatalog.forEach(({ item }) => {\n  allProducts[item] = 0;\n});\n\n\n\nconst Checkout = () => {\n  const [cartQuantities, setCartQuantities] = useState(allProducts);\n  const [total, updateTotal] = useState(0);\n\n  const setNewProductQuantities = (item, quantity) => {\n    let newCartQuantities = { ...cartQuantities };\n    newCartQuantities[item] += quantity;\n    updateTotal(calculateTotal(ProductCatalog, newCartQuantities));\n    setCartQuantities(newCartQuantities);\n  };\n\n  const calculateTotal = (productList, quantities) => {\n    let total = 0;\n\n    productList.forEach(({ item, unitPrice, offer }) => {\n      if (quantities[item] === 0) return; // If the current product quantity is zero, move onto the next product\n      if (offer) {\n        // If the current product has a truthy property of specialOffer, calculate the necessary discount as well as any full priced remaining product quantity\n        const { quantity, specialPrice } = offer;\n\n        let deal = quantities[item] / quantity;\n        let remainder = quantities[item] % quantity;\n\n        total += Math.floor(deal) * specialPrice + remainder * unitPrice;\n        return;\n      }\n      // If the quantity is above zero but it doesn't have any specialOffers, simply calculate the price\n      total += quantities[item] * unitPrice;\n    });\n\n    return total;\n  };\n\n  const clearCart = () => {\n    // Set the quantities back to the original empty product list, and total back to zero.\n    setCartQuantities(allProducts);\n    updateTotal(0);\n  };\n\n  return (\n    <div>\n      <TitleBanner />\n      <Products\n        productList={ProductCatalog}\n        setQuantity={setNewProductQuantities}\n      />\n      <Cart\n        quantities={cartQuantities}\n        total={total}\n        clearCart={clearCart}\n      />\n    </div>\n  );\n};\n\n\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}